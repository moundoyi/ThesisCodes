/*This Program impliment the following PDE system
{ u_t - mu*Delta(u) = f(u,v)  (1),		f(u) = u(1-u)(u-a)-uv
{ v_t - mu*Delta(v) = g(u,v)  (2),	g(v) = beta*(u-gamma*v)
*/

//# -*- coding: utf-8 -*-
//load "iovtk"
int nombredepas  = 150;
real mu =0.001;
real gamma = 1.5;
real beta = 0.008;
real alpha = 0.139;
real T = 300, dt = T/nombredepas, unsurdt = 1./dt;
//-----#########################
real longueur = 5;
real largeur =4;
border c1(t=0,1){x=longueur*t; y=0;label=1;};
border c2(t=1,2){x=longueur; y=largeur*(t-1);label=2;};
border c3(t=2,3){x=longueur-longueur*(t-2); y=largeur;label=3;};
border c4(t=3,4){x=0; y=largeur-largeur*(t-3);label=4;};
mesh Th = buildmesh ( c1(50)+c2(20)+c3(50)+c4(20) ); 
plot(Th, wait=1);
fespace Vh(Th,P2);

func real ini(real x, real y)
{
    real x1=2, x2=3, e=0.07;
    if (x<=x2 && x>=x1 && y<= e)
        return 1;
    if (x<x1 && x>x1-e && y<= e)
        return exp(-1/x^2)*exp(-1/(x-x1)^2);
    if (x<x2+e && x>x2 && y<= e)	
        return 1-exp(-1/(x-x2)^2);
    else return 0;
}

macro Grad(u) [dx(u),dy(u)]//	

func v0 = 0.;
 
Vh u, v, phi, psi, vp=v0, up = ini(x,y)	;

// Variational definitions-----------####################################

varf a(u,phi)	=	int2d(Th)( u*phi/dt + mu*(Grad(u)'*Grad(phi)))	;
varf b1(up,phi)	= 	int2d(Th)( up*phi/dt)			;	
varf b2(f,phi)	=	int2d(Th)( f*phi)			;
varf b3(utv,phi)=	int2d(Th)(utv*phi)			;
 
matrix A = a(Vh,Vh)  ;
matrix B1= b1(Vh,Vh) ;
matrix B2= b2(Vh,Vh) ;
matrix B3= b3(Vh,Vh) ;

varf c(v,psi)		= int2d(Th)( v*psi/dt + mu*(Grad(v)'*Grad(psi)))  ;
varf d1(vp,psi)		= int2d(Th)( vp*psi/dt)				  ;
varf d2(g,psi)		= int2d(Th)( g*psi)				  ;
varf Betu(s,psi)	= int2d(Th)( beta*s*psi)				  ;

matrix	C	= c(Vh,Vh,solver=UMFPACK);
matrix D1	= d1(Vh,Vh)		 ;
matrix D2	= d2(Vh,Vh)		 ;
matrix N	= Betu(Vh,Vh)		 ;

real[int] B1u(0:Vh.ndof-1)		;
real[int] D1v(0:Vh.ndof-1)		;
real[int] Nv(0:Vh.ndof-1)		;
real[int] G(0:Vh.ndof-1); G=0		;
real[int] F(0:Vh.ndof-1); F=0		;
real[int] I(0:Vh.ndof-1); I=0		;


// Time loop
for(int it=0;it<nombredepas;++it)
{
	Vh g = -beta*gamma*v, f = u*(1-u)*(u-alpha), utv = -u*v;
	F	= B2*f[]		;
	G	= D2*g[]		;
	I 	= B3*utv[]		;
	real[int]B1u	= B1*up[]	;
	real[int]D1v	= D1*vp[]	;
	real[int]Nv	= N*up[]	;
	
	real[int]r1	= B1u		;r1 +=F;r1 +=I ;
	real[int]r2	= D1v		;r2 +=G;r2 +=Nv; 
	u[]	= A^-1*r1	;	v[]	 = C^-1*r2	;	
	cout <<"  Fin de la "<<it<<"e iteration"<<endl;
        cout <<"  u varie entre "<<u[].min<<" et "<<u[].max<<endl;
        cout <<"  v varie entre "<<v[].min<<" et "<<v[].max<<endl;
	cout <<"betau "<< beta*u<<endl;
	cout <<"betagammav " << beta*gamma*v<<endl;
	plot(u,fill=1,value=1,wait=0, cmm="it="+it);//ps="res"+it+".eps"
	up[]	= u[];
	vp[]	= v[];
}
