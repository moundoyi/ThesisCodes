/*This Program impliment the following PDE system
{ u_t - mu*Delta(u) = f(u,v)  (1),		f(u) = u(1-u)(u-a)-uv
{ v_t - mu*Delta(v) = g(u,v)  (2),	g(v) = beta*(u-gama*v)
*/

//load "Element_P3"	 
//load "iovtk"

// Parameters-------########################################################
int nombredepas  = 50;
real T = 3., dt = T/nombredepas;
real alpha = 0.139;
real beta = 0.008;
real gama = 1.5;
real r = 1.;
real mu = 1.;
//------------------#########################################################

//Geometry----------############################################
border Disk(t = 0,2*pi){x = r*cos(t)	;y = r*sin(t)	;}
mesh Th = buildmesh(Disk(300));	
fespace Vh(Th,P2);
//------------------########################################################

macro Grad(u) [dx(u),dy(u)]//	

// Initial condition
//func real u0 (real x,real y)
//{
//        if (abs(x-1.) <= epsilon )  return 1.;
//        else return 0.;
//}

//#######################################################

func real ini(real x)
{
    real x1=0.4, x2=0.6, e=0.1;
    if (x<=x2 && x>=x1)
        return 1;
    if (x<x1 && x>x1-e)
        return exp(-1/x^2)*exp(-1/(x-x1)^2);
    if (x<x2+e && x>x2)	
        return 1-exp(-1/(x-x2)^2);
    else return 0;
}
//##########################################################
func v0 = 0.;
//int h=20;
//func real U0(real x, real y)
//{
//	func p = atan2(y,x);
//	if (abs(p)>= 0. && abs(p)<= pi/h && x>0.98) return 1.;
//	else return 0.;	
//}
//Vh theta = atan2(y,x)	; 
Vh u,v,vp=v0	;
//Vh up = U0(x,y);
Vh up = ini(x);
Vh phi, psi;

// Variational definitions-----------####################################

//terms for the 1d matrix and the Rhs
varf a(u,phi)	=	int2d(Th)( u*phi/dt + mu*(Grad(u)'*Grad(phi)))	;//Grad(u)'*Grad(phi)
varf b1(up,phi)	= 	int2d(Th)( up*phi/dt)			;	
varf b2(f,phi)	=	int2d(Th)( f*phi)			;
varf b3(utv,phi)=	int2d(Th)(utv*phi)			;
 
matrix A = a(Vh,Vh)  ;
matrix B1= b1(Vh,Vh) ;
matrix B2= b2(Vh,Vh) ;
matrix B3= b3(Vh,Vh) ;



//terms for the 2d matrix and the Rhs
varf c(v,psi)		= int2d(Th)( v*psi/dt + mu*(Grad(v)'*Grad(psi)))  ;
varf d1(vp,psi)		= int2d(Th)( vp*psi/dt)				  ;
varf d2(g,psi)		= int2d(Th)( g*psi)				  ;
varf Betu(s,phi)	= int1d(Th)( beta*s*phi)				  ;

matrix	C	= c(Vh,Vh,solver=UMFPACK);
matrix D1	= d1(Vh,Vh)		 ;
matrix D2	= d2(Vh,Vh)		 ;
matrix N	= Betu(Vh,Vh)		 ;

real[int] B1u(0:Vh.ndof-1)		;
real[int] D1v(0:Vh.ndof-1)		;
real[int] Nv(0:Vh.ndof-1)		;
real[int] G(0:Vh.ndof-1); G=0		;
real[int] F(0:Vh.ndof-1); F=0		;
real[int] I(0:Vh.ndof-1); I=0		;


//--##########################################################################

// Time loop
for(int it=0;it<nombredepas;++it)
{
	Vh g = -beta*gama*v, f = u*(1-u)*(u-alpha), utv = u*v;
	F	= B2*f[]		;
	G	= D2*g[]		;
	I 	= B3*utv[]		;
	real[int]B1u	= B1*up[]	;
	real[int]D1v	= D1*vp[]	;
	real[int]Nv	= N*up[]	;
	
	real[int]r1	= B1u		;r1 +=F;r1 +=I ;
	real[int]r2	= D1v		;r2 +=G;r2 +=Nv; 
	u[]	= A^-1*r1	;	v[]	 = C^-1*r2	;	
	cout <<"  Fin de la "<<it<<"e iteration"<<endl;
        cout <<"  u varie entre "<<u[].min<<" et "<<u[].max<<endl;
        cout <<"  v varie entre "<<v[].min<<" et "<<v[].max<<endl;
	plot(u,fill=1,value=1,wait=0, cmm="it="+it,ps="res"+it+".eps");
	up[]	= u[];
	vp[]	= v[];
	//cout << up[].max<< up[].min<<endl;
	//savevtk("heat"+it+".vtk",Th,[u,v],u,v);
}
