real[int] colormapHSVjet = [
     0.6667,    1.0000,    0.5625,
     0.6667,    1.0000,    0.6250,
     0.6667,    1.0000,    0.6875,
     0.6667,    1.0000,    0.7500,
     0.6667,    1.0000,    0.8125,
     0.6667,    1.0000,    0.8750,
     0.6667,    1.0000,    0.9375,
     0.6667,    1.0000,    1.0000,
     0.6563,    1.0000,    1.0000,
     0.6458,    1.0000,    1.0000,
     0.6354,    1.0000,    1.0000,
     0.6250,    1.0000,    1.0000,
     0.6146,    1.0000,    1.0000,
     0.6042,    1.0000,    1.0000,
     0.5938,    1.0000,    1.0000,
     0.5833,    1.0000,    1.0000,
     0.5729,    1.0000,    1.0000,
     0.5625,    1.0000,    1.0000,
     0.5521,    1.0000,    1.0000,
     0.5417,    1.0000,    1.0000,
     0.5313,    1.0000,    1.0000,
     0.5208,    1.0000,    1.0000,
     0.5104,    1.0000,    1.0000,
     0.5000,    1.0000,    1.0000,
     0.4889,    0.9375,    1.0000,
     0.4762,    0.8750,    1.0000,
     0.4615,    0.8125,    1.0000,
     0.4444,    0.7500,    1.0000,
     0.4242,    0.6875,    1.0000,
     0.4000,    0.6250,    1.0000,
     0.3704,    0.5625,    1.0000,
     0.3333,    0.5000,    1.0000,
     0.2963,    0.5625,    1.0000,
     0.2667,    0.6250,    1.0000,
     0.2424,    0.6875,    1.0000,
     0.2222,    0.7500,    1.0000,
     0.2051,    0.8125,    1.0000,
     0.1905,    0.8750,    1.0000,
     0.1778,    0.9375,    1.0000,
     0.1667,    1.0000,    1.0000,
     0.1563,    1.0000,    1.0000,
     0.1458,    1.0000,    1.0000,
     0.1354,    1.0000,    1.0000,
     0.1250,    1.0000,    1.0000,
     0.1146,    1.0000,    1.0000,
     0.1042,    1.0000,    1.0000,
     0.0938,    1.0000,    1.0000,
     0.0833,    1.0000,    1.0000,
     0.0729,    1.0000,    1.0000,
     0.0625,    1.0000,    1.0000,
     0.0521,    1.0000,    1.0000,
     0.0417,    1.0000,    1.0000,
     0.0313,    1.0000,    1.0000,
     0.0208,    1.0000,    1.0000,
     0.0104,    1.0000,    1.0000,
          0,    1.0000,    1.0000,
          0,    1.0000,    0.9375,
          0,    1.0000,    0.8750,
          0,    1.0000,    0.8125,
          0,    1.0000,    0.7500,
          0,    1.0000,    0.6875,
          0,    1.0000,    0.6250,
          0,    1.0000,    0.5625,
          0,    1.0000,    0.5000];

// Liste d'isovaleurs constantes d'une image Ã  l'autre
int ni = 30;
int mi = 61;
real[int] ui(mi);
real[int] vi(ni);
for (int it=0; it<= ni - 1; it++)
{
//ui[it]=0.02*it;
vi[it]=0.05*it;
}
for (int it=0; it<= mi - 1; it++)
{
ui[it]=0.02*it;
}
load "iovtk"
int ratio = 20,nfreq=5;
real r=1.,e=r/ratio;// e = epsilon

border Disk0(t=0,2*pi){x=(r+e)*cos(t);y=(r+e)*sin(t);label=1;};
border disk(t=0,2*pi){x=r*cos(t);y=r*sin(t);label=2;};
mesh ring =buildmesh(Disk0(200)+disk(-300));
mesh unitdisk =buildmesh(disk(300));
mesh mixte = ring + unitdisk;
//plot(ring,wait=0);

fespace Vh(ring,P2);
fespace Xh(unitdisk,P2);
// Fixing Parameters
int ndt = 100;
real T=10, dt=T/ndt, alpha=1/dt,d=1.,mu=1;

// initial cond.
func real u0(real x, real y)
{
	if ((x<= -r+e && x>=-r && y>=0 && y<=0.5)) return 1;
	else return 0.;
}
//
func v0=0;
// defining a macro = Gradient of a quantity: macro's definition always ends with "//"
macro Grad(u) [dx(u),dy(u)]//
Vh u,phi,up,f; // phi test function, up u previous
//
up=u0(x,y); // Starting point of the computation
// Definition of the First equation of the System
solve heat1(u,phi,solver=CG)=
	int2d(ring)	( alpha*u*phi + Grad(u)'*Grad(phi) )
	- int2d(ring)	( alpha*up*phi + f*phi )
	;
//
//Getting Ready for Second equation's definition 
Xh v,psi,vp,g;
vp=v0;
problem heat2(v,psi,solver=CG)=
	int2d(unitdisk)	( alpha*v*psi + mu*Grad(v)'*Grad(psi) )
	- int1d(ring)	( up*psi )
	- int2d(unitdisk)	( alpha*vp*psi + g*psi )
	;

string sortie,fichier="fig";
sortie=fichier+"mesh.eps";plot(mixte,wait=0,ps=sortie);
// Time loop for solving the System once
for (int it=0; it<= ndt; it++)
{
	f= u*(1-u);
	g= - d*v;
	heat1;
	heat2;
	// Print values of u and v
	cout << it <<" "<<" "<<"u="<< u <<endl;
	cout << it <<" "<<" "<<"v="<<  v <<endl;
	plot(u,fill=1,wait=1,dim=2,value=1,cmm="u  at t="+it,ps="res"+it+".eps",hsv=colormapHSVjet,viso=vi);
	//plot(v,fill=1,dim=2,value=1,cmm="v at t="+it,ps="res"+it+".eps",hsv=colormapHSVjet);
	//savevtk("heat"+it+".vtk",ring,u);
	//savevtk("heat"+it+".vtk",unitdisk,[u,v],u,v);
	// swap values for the next iteration.
	up =u;
	vp =v;	
}
